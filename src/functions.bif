module S7Comm;

%%{
    #include <sstream>
%%}


function real_to_float%(data: string%): double
    %{
        char* c_str = copy_string(data->CheckString());
        std::string str = std::string(c_str);

        union ulf
        {
            unsigned long ul;
            float f;
        };

        ulf u;
        stringstream ss(str);
        ss >> hex >> u.ul;
        float f = u.f;

        return new Val(f, TYPE_DOUBLE);
    %}

function int_to_count%(data: string%): count
    %{
        char* c_str = 0;
        std::string str = "";

        c_str = copy_string(data->CheckString());
        str = std::string(c_str);

        return new Val(std::stoul(str, nullptr, 16), TYPE_COUNT);
    %}

function integer_to_count%(data: string, length: count%): index_vec
    %{
        VectorVal* count_vec = 0;
        char* c_str = 0;
        std::string str = "";
        unsigned int i = 0, j = 0;

        c_str = copy_string(data->CheckString());
        str = std::string(c_str);

        count_vec = new VectorVal(internal_type("index_vec")->AsVectorType());

        // Check if length is a multiplier of 2;
        if(length % 2)
        {
            return count_vec;
        }
        
        // length / 2 because the given length is the amount of bytes
        // 8 byte -> 4 integer (1 integer = 16 bit = 2 byte);
        for(i = 0; i < (length / 2) ; i+=1, j+=4)
        {
            std::string sub = str.substr(j, 4);
            count_vec->Assign(count_vec->Size(), new Val((std::stoul(sub, nullptr, 16)), TYPE_COUNT));
        }

        return count_vec;
    %}

function byte_to_count%(data: string, length: count%): index_vec
    %{
        VectorVal* count_vec = 0;
        char* c_str = 0;
        std::string str = "";
        unsigned int i = 0, j = 0;

        c_str = copy_string(data->CheckString());
        str = std::string(c_str);

        count_vec = new VectorVal(internal_type("index_vec")->AsVectorType());

        // Check if length is a multiplier of 2;
        if(length % 2)
        {
            return count_vec;
        }
        
        for(i = 0; i < length; i+=1, j+=2)
        {
            std::string sub = str.substr(j, 2);
            count_vec->Assign(count_vec->Size(), new Val((std::stoul(sub, nullptr, 16)), TYPE_COUNT));
        }

        return count_vec;
    %}

function byte_to_bit_array%(data: string%): index_vec
    %{
        VectorVal* count_vec = 0;
        char* c_str = 0;
        std::string str = "";
        int i = 0;
        uint8_t value = 0;

        c_str = copy_string(data->CheckString());
        str = std::string(c_str);

        value = std::stoul(str, nullptr, 16);

        count_vec = new VectorVal(internal_type("index_vec")->AsVectorType());

        for(i = 0; i < 8; i++)
        {
            count_vec->Assign(count_vec->Size(), new Val((value % 2), TYPE_COUNT));
            value /= 2;
        }
        return count_vec;
    %}

function count_to_bit_array%(data: count%): index_vec
    %{
        VectorVal* count_vec = 0;
        int i = 0;
        count_vec = new VectorVal(internal_type("index_vec")->AsVectorType());

        for(i = 0; i < 8; i++)
        {
            count_vec->Assign(count_vec->Size(), new Val((data % 2), TYPE_COUNT));
            data /= 2;
        }
        return count_vec;
    %}